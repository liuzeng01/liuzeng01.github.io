<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>August on iNote</title>
    <link>https://liuzeng01.github.io/programing/go/note/august/</link>
    <description>Recent content in August on iNote</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://liuzeng01.github.io/programing/go/note/august/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Got下载工具</title>
      <link>https://liuzeng01.github.io/programing/go/note/august/got/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuzeng01.github.io/programing/go/note/august/got/</guid>
      <description> 1.安装 go get github.com/melbahja/got/cmd/got 或者直接下载release包也可以
2. 命令行使用方法 got https://example.com/file.mp4 got --out /path/to/save https://example.com/file.mp4 3. 代码中引用 package main import &amp;#34;log&amp;#34; import &amp;#34;github.com/melbahja/got&amp;#34; func main() { dl, err := got.New(&amp;#34;https://golang.google.cn/dl/go1.14.7.windows-amd64.zip&amp;#34;, &amp;#34;go.zip&amp;#34;) if err != nil { log.Fatal(err) } // Start the download 	err = dl.Start() } //可以包装到携程里面  Back</description>
    </item>
    
    <item>
      <title>二维码生成</title>
      <link>https://liuzeng01.github.io/programing/go/note/august/qrcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuzeng01.github.io/programing/go/note/august/qrcode/</guid>
      <description>使用Go语言编程时，生成任意内容的二维码是非常方便的，因为我们有go-qrcode这个库。该库的源代码托管在github上，大家可以下载使用 https://github.com/skip2/go-qrcode。 使用如下函数生成一个二维码图片
func WriteFile(content string, level RecoveryLevel, size int, filename string) error WriteFile函数的原型定义如上，它有几个参数，大概意思如下：
content表示要生成二维码的内容，可以是任意字符串。
level表示二维码的容错级别，取值有Low、Medium、High、Highest。
size表示生成图片的width和height，像素单位。
filename表示生成的文件名路径。
RecoveryLevel类型其实是个int,它的定义和常量如下。
type RecoveryLevel int const ( // Level L: 7% error recovery.  Low RecoveryLevel = iota // Level M: 15% error recovery. Good default choice.  Medium // Level Q: 25% error recovery.  High // Level H: 30% error recovery.  Highest ) RecoveryLevel越高，二维码的容错能力越好。
package main import &amp;#34;github.com/skip2/go-qrcode&amp;#34; func main() { qrcode.</description>
    </item>
    
    <item>
      <title>Go语言设计模式</title>
      <link>https://liuzeng01.github.io/programing/go/note/august/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liuzeng01.github.io/programing/go/note/august/design/</guid>
      <description>设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结，使用设计模式是为了可重用代码、让代码更容易被他人理解并且保证代码可靠性。
1. 创建型模式 单例模式 单例模式算是23中设计模式里最简单的一个了，它主要用于保证一个类仅有一个实例，并提供一个访问它的全局访问点。
在程序设计中，有一些对象通常我们只需要一个共享的实例，比如线程池、全局缓存、对象池等，这种场景下就适合使用单例模式。
但是，并非所有全局唯一的场景都适合使用单例模式。比如，考虑需要统计一个API调用的情况，有两个指标，成功调用次数和失败调用次数。这两个指标都是全局唯一的，所以有人可能会将其建模成两个单例SuccessApiMetric和FailApiMetric。按照这个思路，随着指标数量的增多，你会发现代码里类的定义会越来越多，也越来越臃肿。这也是单例模式最常见的误用场景，更好的方法是将两个指标设计成一个对象ApiMetric下的两个实例ApiMetic success和ApiMetic fail。 如何判断一个对象是否应该被建模成单例？
通常，被建模成单例的对象都有“中心点”的含义，比如线程池就是管理所有线程的中心。所以，在判断一个对象是否适合单例模式时，先思考下，这个对象是一个中心点吗？
在对某个对象实现单例模式时，有两个点必须要注意：（1）限制调用者直接实例化该对象；（2）为该对象的单例提供一个全局唯一的访问方法。
我们可以利用Go语言package的访问规则来实现，将单例结构体设计成首字母小写，就能限定其访问范围只在当前package下，模拟了C++/Java中的私有构造函数；再在当前package下实现一个首字母大写的访问函数，就相当于static方法的作用了。
在实际开发中，我们经常会遇到需要频繁创建和销毁的对象。频繁的创建和销毁一则消耗CPU，二则内存的利用率也不高，通常我们都会使用对象池技术来进行优化。考虑我们需要实现一个消息对象池，因为是全局的中心点，管理所有的Message实例，所以将其实现成单例，实现代码如下
package msgpool ... // 消息池 type messagePool struct { pool *sync.Pool } // 消息池单例 var msgPool = &amp;amp;messagePool{ // 如果消息池里没有消息，则新建一个Count值为0的Message实例  pool: &amp;amp;sync.Pool{New: func() interface{} { return &amp;amp;Message{Count: 0} }}, } // 访问消息池单例的唯一方法 func Instance() *messagePool { return msgPool } // 往消息池里添加消息 func (m *messagePool) AddMsg(msg *Message) { m.pool.Put(msg) } // 从消息池里获取消息 func (m *messagePool) GetMsg() *Message { return m.</description>
    </item>
    
  </channel>
</rss>